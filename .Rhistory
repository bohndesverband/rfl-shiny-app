dplyr::filter(week < var.week)
saveRDS(rbind(loadData, scores), "data/playerscores/rfl-playerscores-2022.rds")
var.season <- 2022
for (var.week in 1:6) {
if(var.week == 1) {
elo_past <- read.csv(paste0("data/elo/rfl-elo-", var.season - 1, ".csv"), colClasses=c("franchise_id" = "character", "franchise_elo_postgame" = "integer")) %>%
dplyr::filter(season == var.season - 1)
} else {
elo_past <- read.csv(paste0("data/elo/rfl-elo-", var.season, ".csv"), colClasses=c("franchise_id" = "character", "franchise_elo_postgame" = "integer")) %>%
dplyr::filter(season == var.season)
}
elo_past <- elo_past %>%
dplyr::group_by(franchise_id) %>%
dplyr::arrange(week) %>%
dplyr::summarise(franchise_elo_postgame = last(franchise_elo_postgame), .groups = "drop") # der weg ist so nötig um für bye weeks in den PO daten zu kriegen
if (var.season < 2021 & var.week >= 13 | var.season >= 2021 & var.week >= 14) {
# post season
schedule <- readr::read_rds("data/schedule/rfl-results-postseason.rds") %>%
dplyr::filter(season == var.season)
} else {
# reg season
scores <- jsonlite::read_json(paste0("https://www48.myfantasyleague.com/", var.season, "/export?TYPE=weeklyResults&L=63018&APIKEY=&W=", var.week, "&JSON=1")) %>%
#purrr::pluck("weeklyResults", "franchise") %>% # pre 2020
purrr::pluck("weeklyResults", "matchup") %>%
tibble::tibble() %>%
tidyr::unnest_wider(1) %>%
tidyr::unnest(1) %>%
tidyr::unnest_wider(1) %>%
dplyr::select(id, score) %>%
dplyr::rename(franchise_id = id) %>%
dplyr::mutate(score = as.numeric(score)) %>%
dplyr::distinct()
schedule <- read.csv("data/rfl-schedules.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character")) %>%
dplyr::filter(season == var.season) %>%
dplyr::mutate(week = as.integer(str_remove(week, "^0+"))) %>%
# für jedes spiel zwei zeilen erstellen mit jedem team als franchise und opponent
dplyr::mutate(
game_id = paste0(season, week, franchise_id, opponent_id),
away_opponent = opponent_id,
home_opponent = franchise_id
) %>%
tidyr::gather(key, value, ends_with("_opponent")) %>%
dplyr::mutate(
opponent_id = ifelse(opponent_id == value, franchise_id, opponent_id),
franchise_id = ifelse(franchise_id == opponent_id, value, franchise_id),
) %>%
dplyr::select(game_id, season:opponent_id) %>%
dplyr::distinct() %>%
# punkte
dplyr::left_join(scores %>% dplyr::rename(franchise_score = score), by = c("franchise_id")) %>%
dplyr::left_join(scores %>% dplyr::rename(opponent_score = score), by = c("opponent_id" = "franchise_id"))
}
elo <- schedule %>%
dplyr::filter(season == var.season, week == var.week) %>%
# previous elo
dplyr::left_join(
elo_past %>%
dplyr::select(franchise_id, franchise_elo_postgame) %>%
dplyr::rename(franchise_elo_pregame = franchise_elo_postgame) %>%
dplyr::mutate(franchise_id = as.character(franchise_id)),
by = "franchise_id"
) %>%
dplyr::left_join(
elo_past %>%
dplyr::select(franchise_id, franchise_elo_postgame) %>%
dplyr::rename(opponent_elo_pregame = franchise_elo_postgame) %>%
dplyr::mutate(franchise_id = as.character(franchise_id)),
by = c("opponent_id" = "franchise_id")
) %>%
dplyr::mutate(
# if week 1 of season, recalc to default value
franchise_elo_pregame = ifelse(week == 1, round((franchise_elo_pregame * (2/3)) + (1500 * (1/3))), franchise_elo_pregame),
opponent_elo_pregame = ifelse(week == 1, round((opponent_elo_pregame * (2/3)) + (1500 * (1/3))), opponent_elo_pregame),
score_differential = round(franchise_score - opponent_score, 2),
result = case_when(
score_differential > 0 ~ 1, # 1 für win
score_differential < 0 ~ 0, # 0 für loss
T ~ 0.5 # 0.5 für tie
),
forecast = 1 / (10^(-(franchise_elo_pregame - opponent_elo_pregame) / 400 ) + 1),
k = 36,
forecast_delta = result - forecast,
mov_multiplier = ifelse(score_differential >= 0, log(score_differential+1) * (2.2 / franchise_elo_pregame - opponent_elo_pregame * 0.001 + 2.2), 1),
elo_shift = round(k * forecast_delta + mov_multiplier),
) %>%
dplyr::group_by(franchise_id) %>%
dplyr::mutate(
franchise_elo_postgame = first(franchise_elo_pregame) + sum(elo_shift),
franchise_id = as.character(franchise_id)
) %>%
dplyr::ungroup() %>%
dplyr::select(1:7, score_differential, franchise_elo_pregame, opponent_elo_pregame, elo_shift, franchise_elo_postgame)
if (var.week == 1) {
write.csv(elo, paste0("data/elo/rfl-elo-", var.season, ".csv"), row.names = F)
} else {
elo_old <- read.csv(paste0("data/elo/rfl-elo-", var.season, ".csv"), colClasses=c("franchise_id" = "character", "opponent_id" = "character"))
write.csv(rbind(elo_old, elo), paste0("data/elo/rfl-elo-", var.season, ".csv"), row.names = F)
}
}
elo_2016 <- read.csv("data/elo/rfl-elo-2016.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2017 <- read.csv("data/elo/rfl-elo-2017.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2018 <- read.csv("data/elo/rfl-elo-2018.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2019 <- read.csv("data/elo/rfl-elo-2019.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2020 <- read.csv("data/elo/rfl-elo-2020.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2021 <- read.csv("data/elo/rfl-elo-2021.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2022 <- read.csv("data/elo/rfl-elo-2022.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
write.csv(rbind(elo_2016, elo_2017, elo_2018, elo_2019, elo_2020, elo_2021, elo_2022), "app/data/rfl-elo.csv", row.names = F)
rm(var.season, var.week, elo_old, elo, elo_past, schedule, scores, elo_2016, elo_2017, elo_2018, elo_2019, elo_2020, elo_2021, elo_2022)
var.season = nflreadr::get_current_season()
var.week = nflreadr::get_current_week() - 1
starter <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/starter/rfl-starter-2022.csv", colClasses = c("franchise_id" = "character"))
schedule <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/rfl-schedules.csv", colClasses = c("franchise_id" = "character", "opponent_id" = "character")) %>%
dplyr::filter(season == var.season) %>%
dplyr::select(-season) %>%
dplyr::mutate(
game_id = paste0(week, franchise_id, opponent_id)
)
points <- starter %>%
dplyr::group_by(week, franchise_id) %>%
dplyr::summarise(
pf = sum(player_score[starter_status == "starter"], na.rm = T),
pp = sum(player_score[should_start == 1], na.rm = T),
coach = pf - pp,
.groups = "drop"
)
results <- points %>%
dplyr::left_join(
schedule %>%
tidyr::gather(key, franchise_id, c(franchise_id, opponent_id)) %>%
dplyr::select(week, franchise_id, game_id),
by = c("franchise_id", "week")
) %>%
dplyr::left_join(
schedule %>%
dplyr::rename(away_id = franchise_id, home_id= opponent_id) %>%
dplyr::select(-week),
by = "game_id"
) %>%
dplyr::mutate(opponent_id = ifelse(franchise_id == away_id, home_id, away_id)) %>%
dplyr::left_join(
points %>%
dplyr::select(week, franchise_id, pf_opponent = pf),
by = c("week", "opponent_id" = "franchise_id")
) %>%
dplyr::mutate(
win = ifelse(pf - pf_opponent > 0, 1, 0)
) %>%
dplyr::left_join(
points %>%
dplyr::select(week, franchise_id, pf) %>%
dplyr::distinct() %>%
dplyr::group_by (week) %>%
dplyr::arrange(pf) %>%
dplyr::mutate(all_play_wins = row_number() - 1) %>%
dplyr::ungroup() %>%
dplyr::select(-pf),
by = c("week", "franchise_id")
) %>%
dplyr::select(-home_id, -away_id, -game_id, -opponent_id, -pf_opponent)
true_standing <- purrr::map_df(1:var.week, function(x) {
results %>%
dplyr::filter(week <= x) %>%
dplyr::group_by(franchise_id) %>%
dplyr::summarise(across(c(win, pf, pp, coach, all_play_wins), sum), .groups = "drop") %>%
dplyr::arrange(pf) %>%
dplyr::mutate(pf_rank = row_number()) %>%
dplyr::arrange(pp) %>%
dplyr::mutate(pp_rank = row_number()) %>%
dplyr::arrange(win) %>%
dplyr::mutate(record_rank = row_number()) %>%
dplyr::arrange(all_play_wins) %>%
dplyr::mutate(all_play_rank = row_number()) %>%
dplyr::arrange(coach) %>%
dplyr::mutate(
coach_rank = row_number(),
week = x,
true_standing = pf_rank + pp_rank + record_rank + all_play_rank + coach_rank
) %>%
dplyr::group_by(week) %>%
dplyr::arrange(desc(true_standing)) %>%
dplyr::mutate(true_rank = row_number())
})
write.csv(true_standing, "data/rfl-true-standing.csv", row.names = F)
rm(var.season, var.week, starter, schedule, points, results, true_standing)
true_standing <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/rfl-true-standing.csv", colClasses = c("franchise_id" = "character")) %>%
dplyr::left_join(
franchises %>%
dplyr::select(franchise_id, franchise_name, division_name),
by = "franchise_id"
)
setwd("M:/Projekte/Jakob Eschler Design/Eigene Projekte/R/nflfastR/fantasy/rfl/app")
library(flexdashboard)
library(tidyverse)
library(ffscrapr)
library(dplyr)
library(tidyr)
library(RCurl)
library(DT)
library(ggplot2)
library(scales)
library(ggbump)
library(gt)
library(formattable)
library(jsonlite)
library(gtExtras)
library(svglite)
library(webshot2)
var.mflLeagueID = 63018
var.season = 2022
var.colorBlue = "#00183C"
var.colorRed = "#D03324"
var.colorYellow = "#eb9b03"
var.colorAccent = "#ffffff"
var.fontText = "Open Sans"
var.fontTextBold = "Open Sans Semibold"
var.fontHeadline = "Open Sans Semibold"
mflConnection <- ffscrapr::mfl_connect(season = var.season, league_id = var.mflLeagueID)
## player data ----
players <- jsonlite::read_json("https://www55.myfantasyleague.com/2022/export?TYPE=players&L=63018&APIKEY=&DETAILS=&SINCE=&PLAYERS=&JSON=1") %>%
purrr::pluck("players", "player") %>%
dplyr::tibble() %>%
tidyr::unnest_wider(1) %>%
dplyr::rename(
player_name = name,
pos = position,
player_id = id
)
source("R/base-data.R", local = T)
source("R/chunks/plotDefaults.R")
true_standing <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/rfl-true-standing.csv", colClasses = c("franchise_id" = "character")) %>%
dplyr::left_join(
franchises %>%
dplyr::select(franchise_id, franchise_name, division_name),
by = "franchise_id"
)
View(true_standing)
setwd("M:/Projekte/Jakob Eschler Design/Eigene Projekte/R/nflfastR/fantasy/rfl")
var.season = nflreadr::get_current_season()
var.week = nflreadr::get_current_week() - 1
starter <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/starter/rfl-starter-2022.csv", colClasses = c("franchise_id" = "character"))
schedule <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/rfl-schedules.csv", colClasses = c("franchise_id" = "character", "opponent_id" = "character")) %>%
dplyr::filter(season == var.season) %>%
dplyr::select(-season) %>%
dplyr::mutate(
game_id = paste0(week, franchise_id, opponent_id)
)
points <- starter %>%
dplyr::group_by(week, franchise_id) %>%
dplyr::summarise(
pf = sum(player_score[starter_status == "starter"], na.rm = T),
pp = sum(player_score[should_start == 1], na.rm = T),
coach = pf - pp,
.groups = "drop"
)
results <- points %>%
dplyr::left_join(
schedule %>%
tidyr::gather(key, franchise_id, c(franchise_id, opponent_id)) %>%
dplyr::select(week, franchise_id, game_id),
by = c("franchise_id", "week")
) %>%
dplyr::left_join(
schedule %>%
dplyr::rename(away_id = franchise_id, home_id= opponent_id) %>%
dplyr::select(-week),
by = "game_id"
) %>%
dplyr::mutate(opponent_id = ifelse(franchise_id == away_id, home_id, away_id)) %>%
dplyr::left_join(
points %>%
dplyr::select(week, franchise_id, pf_opponent = pf),
by = c("week", "opponent_id" = "franchise_id")
) %>%
dplyr::mutate(
win = ifelse(pf - pf_opponent > 0, 1, 0)
) %>%
dplyr::left_join(
points %>%
dplyr::select(week, franchise_id, pf) %>%
dplyr::distinct() %>%
dplyr::group_by (week) %>%
dplyr::arrange(pf) %>%
dplyr::mutate(all_play_wins = row_number() - 1) %>%
dplyr::ungroup() %>%
dplyr::select(-pf),
by = c("week", "franchise_id")
) %>%
dplyr::select(-home_id, -away_id, -game_id, -opponent_id, -pf_opponent)
true_standing <- purrr::map_df(1:var.week, function(x) {
results %>%
dplyr::filter(week <= x) %>%
dplyr::group_by(franchise_id) %>%
dplyr::summarise(across(c(win, pf, pp, coach, all_play_wins), sum), .groups = "drop") %>%
dplyr::arrange(pf) %>%
dplyr::mutate(pf_rank = row_number()) %>%
dplyr::arrange(pp) %>%
dplyr::mutate(pp_rank = row_number()) %>%
dplyr::arrange(win) %>%
dplyr::mutate(record_rank = row_number()) %>%
dplyr::arrange(all_play_wins) %>%
dplyr::mutate(all_play_rank = row_number()) %>%
dplyr::arrange(coach) %>%
dplyr::mutate(
coach_rank = row_number(),
week = x,
true_standing = pf_rank + pp_rank + record_rank + all_play_rank + coach_rank
) %>%
dplyr::group_by(week) %>%
dplyr::arrange(desc(true_standing)) %>%
dplyr::mutate(true_rank = row_number())
})
View(true_standing)
write.csv(true_standing, "data/rfl-true-standing.csv", row.names = F)
rm(var.season, var.week, starter, schedule, points, results, true_standing)
setwd("M:/Projekte/Jakob Eschler Design/Eigene Projekte/R/nflfastR/fantasy/rfl/app")
var.mflLeagueID = 63018
var.season = 2022
var.colorBlue = "#00183C"
var.colorRed = "#D03324"
var.colorYellow = "#eb9b03"
var.colorAccent = "#ffffff"
var.fontText = "Open Sans"
var.fontTextBold = "Open Sans Semibold"
var.fontHeadline = "Open Sans Semibold"
mflConnection <- ffscrapr::mfl_connect(season = var.season, league_id = var.mflLeagueID)
## player data ----
players <- jsonlite::read_json("https://www55.myfantasyleague.com/2022/export?TYPE=players&L=63018&APIKEY=&DETAILS=&SINCE=&PLAYERS=&JSON=1") %>%
purrr::pluck("players", "player") %>%
dplyr::tibble() %>%
tidyr::unnest_wider(1) %>%
dplyr::rename(
player_name = name,
pos = position,
player_id = id
)
source("R/base-data.R", local = T)
source("R/chunks/plotDefaults.R")
true_standing <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/rfl-true-standing.csv", colClasses = c("franchise_id" = "character")) %>%
dplyr::left_join(
franchises %>%
dplyr::select(franchise_id, franchise_name, division_name),
by = "franchise_id"
)
View(true_standing)
View(true_standing)
true_standing <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/rfl-true-standing.csv", colClasses = c("franchise_id" = "character"))
View(true_standing)
true_standing <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/rfl-true-standing.csv", colClasses = c("franchise_id" = "character")) %>%
dplyr::left_join(
franchises %>%
dplyr::select(franchise_id, franchise_name, division_name),
by = "franchise_id"
)
View(true_standing)
View(true_standing)
current_standing <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/app/data/rfl-elo.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "franchise_elo_postgame" = "numeric", "franchise_score" = "numeric")) %>%
dplyr::filter(season == max(season)) %>%
dplyr::mutate(
winloss = ifelse(score_differential > 0, 1, 0)
) %>%
dplyr::group_by(franchise_id) %>%
dplyr::arrange(week) %>%
dplyr::summarise(
season = dplyr::first(season),
week = dplyr::last(week),
winloss = list(winloss),
pf_sparkline = list(unique(franchise_score)),
franchise_elo_postgame = dplyr::last(franchise_elo_postgame),
elo_shift = dplyr::last(elo_shift),
.groups = "drop"
) %>%
dplyr::left_join(
read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/data/rfl-true-standing.csv", colClasses=c("franchise_id" = "character")) %>%
dplyr::group_by(franchise_id) %>%
dplyr::arrange(week) %>%
dplyr::summarise(
pp_dist = list(unique(pp / 2) / week),
dplyr::across(c(win, pf, pp, dplyr::ends_with("rank")), ~ dplyr::last(.x))
),
by = "franchise_id"
) %>%
dplyr::arrange(desc(win), desc(pf)) %>%
dplyr::mutate(
place = row_number(),
loss = (2 * week) - win,
pf = pf / 2,
pp = pp / 2,
across(pf_rank:coach_rank, ~ 37 - .x),
elo_shift_norm = elo_shift - min(elo_shift)
) %>%
dplyr::left_join(
franchises %>%
dplyr::select(franchise_id, franchise_name, division_name, conference_name),
by = "franchise_id"
) %>%
dplyr::mutate(
subline = paste(division_name, conference_name, sep = ", ")
) %>%
dplyr::select(place, season, week, franchise_name, win, loss, winloss, pf_sparkline, pp_dist, 12:18, 5:6, elo_shift, subline)
View(current_standing)
current_standing <- read.csv("https://raw.githubusercontent.com/jak3sch/rfl/main/app/data/rfl-elo.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "franchise_elo_postgame" = "numeric", "franchise_score" = "numeric"))
View(current_standing)
setwd("M:/Projekte/Jakob Eschler Design/Eigene Projekte/R/nflfastR/fantasy/rfl")
var.season <- 2022
for (var.week in 1:6) {
if(var.week == 1) {
elo_past <- read.csv(paste0("data/elo/rfl-elo-", var.season - 1, ".csv"), colClasses=c("franchise_id" = "character", "franchise_elo_postgame" = "integer")) %>%
dplyr::filter(season == var.season - 1)
} else {
elo_past <- read.csv(paste0("data/elo/rfl-elo-", var.season, ".csv"), colClasses=c("franchise_id" = "character", "franchise_elo_postgame" = "integer")) %>%
dplyr::filter(season == var.season)
}
elo_past <- elo_past %>%
dplyr::group_by(franchise_id) %>%
dplyr::arrange(week) %>%
dplyr::summarise(franchise_elo_postgame = last(franchise_elo_postgame), .groups = "drop") # der weg ist so nötig um für bye weeks in den PO daten zu kriegen
if (var.season < 2021 & var.week >= 13 | var.season >= 2021 & var.week >= 14) {
# post season
schedule <- readr::read_rds("data/schedule/rfl-results-postseason.rds") %>%
dplyr::filter(season == var.season)
} else {
# reg season
scores <- jsonlite::read_json(paste0("https://www48.myfantasyleague.com/", var.season, "/export?TYPE=weeklyResults&L=63018&APIKEY=&W=", var.week, "&JSON=1")) %>%
#purrr::pluck("weeklyResults", "franchise") %>% # pre 2020
purrr::pluck("weeklyResults", "matchup") %>%
tibble::tibble() %>%
tidyr::unnest_wider(1) %>%
tidyr::unnest(1) %>%
tidyr::unnest_wider(1) %>%
dplyr::select(id, score) %>%
dplyr::rename(franchise_id = id) %>%
dplyr::mutate(score = as.numeric(score)) %>%
dplyr::distinct()
schedule <- read.csv("data/rfl-schedules.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character")) %>%
dplyr::filter(season == var.season) %>%
dplyr::mutate(week = as.integer(str_remove(week, "^0+"))) %>%
# für jedes spiel zwei zeilen erstellen mit jedem team als franchise und opponent
dplyr::mutate(
game_id = paste0(season, week, franchise_id, opponent_id),
away_opponent = opponent_id,
home_opponent = franchise_id
) %>%
tidyr::gather(key, value, ends_with("_opponent")) %>%
dplyr::mutate(
opponent_id = ifelse(opponent_id == value, franchise_id, opponent_id),
franchise_id = ifelse(franchise_id == opponent_id, value, franchise_id),
) %>%
dplyr::select(game_id, season:opponent_id) %>%
dplyr::distinct() %>%
# punkte
dplyr::left_join(scores %>% dplyr::rename(franchise_score = score), by = c("franchise_id")) %>%
dplyr::left_join(scores %>% dplyr::rename(opponent_score = score), by = c("opponent_id" = "franchise_id"))
}
elo <- schedule %>%
dplyr::filter(season == var.season, week == var.week) %>%
# previous elo
dplyr::left_join(
elo_past %>%
dplyr::select(franchise_id, franchise_elo_postgame) %>%
dplyr::rename(franchise_elo_pregame = franchise_elo_postgame) %>%
dplyr::mutate(franchise_id = as.character(franchise_id)),
by = "franchise_id"
) %>%
dplyr::left_join(
elo_past %>%
dplyr::select(franchise_id, franchise_elo_postgame) %>%
dplyr::rename(opponent_elo_pregame = franchise_elo_postgame) %>%
dplyr::mutate(franchise_id = as.character(franchise_id)),
by = c("opponent_id" = "franchise_id")
) %>%
dplyr::mutate(
# if week 1 of season, recalc to default value
franchise_elo_pregame = ifelse(week == 1, round((franchise_elo_pregame * (2/3)) + (1500 * (1/3))), franchise_elo_pregame),
opponent_elo_pregame = ifelse(week == 1, round((opponent_elo_pregame * (2/3)) + (1500 * (1/3))), opponent_elo_pregame),
score_differential = round(franchise_score - opponent_score, 2),
result = case_when(
score_differential > 0 ~ 1, # 1 für win
score_differential < 0 ~ 0, # 0 für loss
T ~ 0.5 # 0.5 für tie
),
forecast = 1 / (10^(-(franchise_elo_pregame - opponent_elo_pregame) / 400 ) + 1),
k = 36,
forecast_delta = result - forecast,
mov_multiplier = ifelse(score_differential >= 0, log(score_differential+1) * (2.2 / franchise_elo_pregame - opponent_elo_pregame * 0.001 + 2.2), 1),
elo_shift = round(k * forecast_delta + mov_multiplier),
) %>%
dplyr::group_by(franchise_id) %>%
dplyr::mutate(
franchise_elo_postgame = first(franchise_elo_pregame) + sum(elo_shift),
franchise_id = as.character(franchise_id)
) %>%
dplyr::ungroup() %>%
dplyr::select(1:7, score_differential, franchise_elo_pregame, opponent_elo_pregame, elo_shift, franchise_elo_postgame)
if (var.week == 1) {
write.csv(elo, paste0("data/elo/rfl-elo-", var.season, ".csv"), row.names = F)
} else {
elo_old <- read.csv(paste0("data/elo/rfl-elo-", var.season, ".csv"), colClasses=c("franchise_id" = "character", "opponent_id" = "character"))
write.csv(rbind(elo_old, elo), paste0("data/elo/rfl-elo-", var.season, ".csv"), row.names = F)
}
}
elo_2022 <- read.csv("data/elo/rfl-elo-2022.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
View(elo_2022)
elo_2016 <- read.csv("data/elo/rfl-elo-2016.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2017 <- read.csv("data/elo/rfl-elo-2017.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2018 <- read.csv("data/elo/rfl-elo-2018.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2019 <- read.csv("data/elo/rfl-elo-2019.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2020 <- read.csv("data/elo/rfl-elo-2020.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2021 <- read.csv("data/elo/rfl-elo-2021.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
elo_2022 <- read.csv("data/elo/rfl-elo-2022.csv", colClasses=c("franchise_id" = "character", "opponent_id" = "character", "game_id" = "character"))
write.csv(rbind(elo_2016, elo_2017, elo_2018, elo_2019, elo_2020, elo_2021, elo_2022), "app/data/rfl-elo.csv", row.names = F)
rm(var.season, var.week, elo_old, elo, elo_past, schedule, scores, elo_2016, elo_2017, elo_2018, elo_2019, elo_2020, elo_2021, elo_2022)
setwd("M:/Projekte/Jakob Eschler Design/Eigene Projekte/R/nflfastR/fantasy/rfl/app")
